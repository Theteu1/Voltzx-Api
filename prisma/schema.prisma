// prisma/schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  phone     String?
  type      UserType
  createdAt DateTime @default(now())

  // Relações específicas
  landOwner LandOwner?
  company   Company?
  investor  Investor?
  projects  Project[]  @relation("UserProjects")
}

model LandOwner {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  lands  Land[]
}

model Company {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  name   String
}

model Investor {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
  investments Investment[]
}

model Land {
  id         String            @id @default(uuid())
  owner      LandOwner         @relation(fields: [ownerId], references: [id])
  ownerId    String
  area       Float
  street     String
  number     String
  complement String?
  district   String
  city       String
  state      String
  postalCode String
  country    String
  available  Boolean           @default(true)
  projects   Project[]
  proposals  ProjectProposal[] // <--- campo relacional oposto adicionado
}

model Project {
  id              String            @id @default(uuid())
  company         User              @relation("UserProjects", fields: [companyId], references: [id])
  companyId       String
  land            Land              @relation(fields: [landId], references: [id])
  landId          String
  title           String
  description     String?
  powerKw         Float
  cost            Float
  estimatedReturn Float
  status          ProjectStatus     @default(PENDING_APPROVAL)
  createdAt       DateTime          @default(now())
  investments     Investment[]
  proposals       ProjectProposal[] // <--- campo relacional oposto adicionado
}

model Investment {
  id           String           @id @default(uuid())
  project      Project          @relation(fields: [projectId], references: [id])
  projectId    String
  investor     Investor         @relation(fields: [investorId], references: [id])
  investorId   String
  value        Float
  investedAt   DateTime         @default(now())
  ownerAgree   AgreementStatus  @default(PENDING)
  companyAgree AgreementStatus  @default(PENDING)
  status       InvestmentStatus @default(PENDING)
  description  String
  createdAt    DateTime         @default(now())
}

model ProjectProposal {
  id        String         @id @default(uuid())
  project   Project        @relation(fields: [projectId], references: [id])
  projectId String
  land      Land           @relation(fields: [landId], references: [id])
  landId    String
  status    ProposalStatus @default(PENDING)
  createdAt DateTime       @default(now())
}

enum UserType {
  OWNER
  COMPANY
  INVESTOR
}

enum ProjectStatus {
  PENDING_APPROVAL
  ACTIVE
  COMPLETED
  REJECTED
}

enum ProposalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AgreementStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum InvestmentStatus {
  PENDING
  ACCEPTED
  REJECTED
}